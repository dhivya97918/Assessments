# -*- coding: utf-8 -*-
"""LVADSUSR83_DHIVYA_SHREE_A_LAB2_FINAL_PREDICTIVE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DWSZ-PVW2h7pMRPOc7Agi1KCdnhi3A9g
"""

#LAB 2

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Step 1: Read Data
df = pd.read_csv('/content/penguins_classification.csv')

# Step 2: Replace Missing Values for Numeric Columns
numeric_cols = ['bill_length_mm','bill_depth_mm','flipper_length_mm','body_mass_g','year']
imputer = SimpleImputer(strategy='median')
df[numeric_cols] = imputer.fit_transform(df[numeric_cols])

# Step 3: Convert Categorical Variables to Numerical using Label Encoding
label_encoder = LabelEncoder()

# List of categorical column names
categorical_columns = ['species', 'island']

# Apply label encoding to each categorical column
for col in categorical_columns:
    df[col] = label_encoder.fit_transform(df[col])

# Define columns for outlier removal
columns_for_outliers = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']
threshold = 3

# Remove outliers
df_cleaned = df[np.all(np.abs((df[columns_for_outliers] - df[columns_for_outliers].mean()) / df[columns_for_outliers].std()) < threshold, axis=1)]


# Step 5: Perform Exploratory Data Analysis (EDA)
print(df_cleaned.describe())

# Visualization
#sns.pairplot(df_cleaned)
#plt.show()

# Correlation Analysis
corr_matrix = df_cleaned.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Step 6: Model Training and Testing
X = df_cleaned.drop(['species'], axis=1)
y = df_cleaned['species']

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Random Forest Classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train_scaled, y_train)

# Step 7: Model Evaluation
y_pred = rf_classifier.predict(X_test_scaled)

# Classification Report
print(classification_report(y_test, y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='g')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()