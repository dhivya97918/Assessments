# -*- coding: utf-8 -*-
"""LVADSUSR83_DHIVYA_SHREE_A_LAB1_FINAL_PREDICTIVE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ySIELP3jzVRBKenRxaJrC6ZE3Tw9sFPN
"""

#LAB 1

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Step 1: Read Data
df = pd.read_csv('/content/Fare prediction.csv')

# Step 2: Replace Missing Values
# Perform Label Encoding for the 'origin' column
label_encoder = LabelEncoder()

# Transform 'key' column
df['key'] = label_encoder.fit_transform(df['key'])
# Transform 'pickup_datetime' column
df['pickup_datetime'] = label_encoder.fit_transform(df['pickup_datetime'])
#no categorical values so no label encoding needed

# Replace missing values with median for numeric columns
imputer = SimpleImputer(strategy='median')
numeric_cols = ['key','pickup_datetime','fare_amount','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count']
df[numeric_cols] = imputer.fit_transform(df[numeric_cols])

# Step 3: Remove Outliers
# No need to remove outliers for linear regression

# Step 4: Perform Exploratory Data Analysis (EDA)
print(df.describe())

# Visualization
#sns.pairplot(df)
#plt.show()

# Step 5: Model Training and Testing
X = df.drop(['key'], axis=1)  # Exclude 'key' as it's not useful for modeling
y = df['fare_amount']

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Linear Regression Model
regression_model = LinearRegression()
regression_model.fit(X_train_scaled, y_train)

# Step 6: Model Evaluation
y_pred = regression_model.predict(X_test_scaled)

# Model Evaluation Metrics
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("Mean Absolute Error:", mae)
print("R-squared:", r2)