# -*- coding: utf-8 -*-
"""LVADSUSR83_DHIVYA_SHREE_FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/101_may81-xy-uX2UkWdxOPmAa_AVgcfm
"""

#1
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statistics
data = pd.read_csv("/content/sample_data/Walmart_Dataset Python_Final_Assessment.csv")
df = pd.DataFrame(data)

#printing the dataframe created
print(df)

#finding the type of the columns present in the dataframe
s=df["Order_ID"].count()
print("the total number of orderes received:",s)
print(type(df))
print(type(df["EmailID"]))
print(type(df["Profit"]))
print(data.head())

#2
#error handling
print(data.info())
print(data.isnull().sum())
print(df.isnull())
duplicates = df.duplicated()
print(duplicates)
def func(df):
  try:
    c = df.groupby(df['EmailID'])[df['Product']].sum()
    print(c)
  except:
    print("Some unexpected error occurred")
func(df)

#3
import pandas as pd

#data_series = pd.Series(data)
mean = df.mean()
median = df.median()
mode = df.mode()

#range = df.max() - df.min()
variance = df.var()
standard_deviation = df.std()


print("Mean:", mean)
print("Median:", median)
print("Mode:", mode)
print("Range:", range)
print("Variance:", variance)
print("Standard deviation:", standard_deviation)

#4
import matplotlib.pyplot as plt
import pandas as pd

plt.figure(figsize=(10, 6))
sales_by_category = df.groupby('Category')['Sales'].sum().sort_values(ascending=False)
sales_by_category.plot(kind='bar', color='blue')
plt.title('Total Sales by Category')
plt.xlabel('Category')
plt.ylabel('Total Sales')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(df['Sales'], bins=10, color='green', edgecolor='black')
plt.title('Sales Distribution')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()


plt.figure(figsize=(10, 6))
plt.scatter(df['Sales'], df['Profit'], color='yellow', alpha=0.7)
plt.title('Profit vs. Sales')
plt.xlabel('Sales')
plt.ylabel('Profit')
plt.tight_layout()
plt.show()


plt.figure(figsize=(10, 6))
df.boxplot(column='Profit', by='Category', vert=False, patch_artist=True)
plt.title('Profit Distribution by Category')
plt.xlabel('Profit')
plt.ylabel('Category')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
market_share = df.groupby('Geography')['Sales'].sum().sort_values(ascending=False)
plt.pie(market_share, startangle=140)
plt.title('Market Share by Geography')
plt.axis('equal')
plt.tight_layout()
plt.show()

#5
correlation_matrix = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

#6
import pandas as pd
data = pd.read_csv("/content/sample_data/Walmart_Dataset Python_Final_Assessment.csv")
column_name = "Sales"
data["scores"] = (data[column_name] - data[column_name].mean()) / data[column_name].std()
threshold = 3
outliers = data[data["scores"].abs() > threshold]
print(outliers)

#7 i)
data['Order_Date'] = pd.to_datetime(data['Order_Date'])
data['Year'] = data['Order_Date'].dt.year
yearly_sales = data.groupby('Year')['Sales'].sum()
yearly_profit = data.groupby('Year')['Profit'].sum()
plt.figure(figsize=(10, 6))
plt.plot(yearly_sales.index, yearly_sales.values, label='Total Sales', marker='o')
plt.plot(yearly_profit.index, yearly_profit.values, label='Total Profit', marker='o')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Sales and Profit Trends Over the Years')
plt.legend()
plt.show()

decomposition_sales = seasonal_decompose(yearly_sales, model='additive', period=1)
decomposition_profit = seasonal_decompose(yearly_profit, model='additive', period=1)

plt.figure(figsize=(10, 8))
plt.subplot(2, 1, 1)
plt.plot(decomposition_sales.seasonal, label='Seasonal Component (Sales)')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Seasonal Component of Sales')

plt.subplot(2, 1, 2)
plt.plot(decomposition_profit.seasonal, label='Seasonal Component (Profit)')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Seasonal Component of Profit')

plt.tight_layout()
plt.show()

#7 ii)
import pandas as pd
data['Order_Date'] = pd.to_datetime(data['Order_Date'])
data['Year'] = data['Order_Date'].dt.year
category_sales = data.groupby(['Year', 'Category'])['Sales'].sum().reset_index()
category_sales['Sales_Growth'] = category_sales.groupby('Category')['Sales'].pct_change()
category_sales = category_sales[category_sales['Year'] != category_sales['Year'].min()]
avg_growth = category_sales.groupby('Category')['Sales_Growth'].mean().reset_index()
most_growth_category = avg_growth.loc[avg_growth['Sales_Growth'].idxmax()]
print("Product category with the most growth in terms of sales:")
print(most_growth_category)

#7 iii)
import matplotlib.pyplot as plt

customer_data = df.groupby('EmailID').agg({'Order_ID': 'nunique', 'Sales': 'sum'}).reset_index()
top_customers_by_orders = customer_data.sort_values(by='Order_ID', ascending=False).head(5)
top_customers_by_sales = customer_data.sort_values(by='Sales', ascending=False).head(5)
print("Top 5 customers based on number of orders placed:")
print(top_customers_by_orders)
print("\nTop 5 customers based on total sales generated:")
print(top_customers_by_sales)

#7 iv)

plt.figure(figsize=(10, 6))
plt.bar(top_customers_by_orders['EmailID'], top_customers_by_orders['Order_ID'], color='skyblue')
plt.title('Number of Orders by Top Customers')
plt.xlabel('Customer Email ID')
plt.ylabel('Number of Orders')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
plt.bar(customer_order_sizes.index, customer_order_sizes.values, color='lightgreen')
plt.title('Average Order Size for Top Customers')
plt.xlabel('Customer Email ID')
plt.ylabel('Average Order Size')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


plt.figure(figsize=(10, 6))
top_customer_product_preferences.plot(kind='bar', color='orange')
plt.title('Product Preferences of Top Customers')
plt.xlabel('Product Category')
plt.ylabel('Number of Orders')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


plt.figure(figsize=(10, 6))
for customer in monthly_sales.index.levels[0]:
    plt.plot(monthly_sales.loc[customer].index, monthly_sales.loc[customer]['Sales'], label=customer)
plt.title('Monthly Sales Trends for Top Customers')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.xticks(range(1, 13), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()


#7 vii)
plt.figure(figsize=(8, 8))
loyalty_counts = [len(repeat_customers), len(top_customers_by_orders) - len(repeat_customers)]
plt.pie(loyalty_counts, labels=['Repeat Customers', 'One-time Buyers'], autopct='%1.1f%%', colors=['lightblue', 'lightgreen'])
plt.title('Loyalty of Top Customers')
plt.axis('equal')
plt.tight_layout()
plt.show()

import pandas as pd

df['Order Date'] = pd.to_datetime(df['Order Date'])

grouped_data = df.groupby('EmailID')

avg_time_between_orders = {}

for customer, orders in grouped_data:
    orders = orders.sort_values(by='Order Date')
    time_diff = orders['Order Date'].diff().mean()
    avg_time_between_orders[customer] = time_diff

avg_time_between_orders_df = pd.DataFrame(avg_time_between_orders.items(), columns=['Customer Email', 'Avg Time Between Orders'])

print(avg_time_between_orders_df)